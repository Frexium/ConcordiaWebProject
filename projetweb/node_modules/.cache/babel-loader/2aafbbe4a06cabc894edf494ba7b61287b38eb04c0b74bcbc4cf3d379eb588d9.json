{"ast":null,"code":"// ------------------------------------------------------------------------------\n// Helpers\n// ------------------------------------------------------------------------------\n\n/**\n * Capitalize a string.\n * @param {string} str\n */\nfunction capitalize(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n/**\n * Checks whether the given string has symbols.\n * @param {string} str\n */\nfunction hasSymbols(str) {\n  return /[!\"#%&'()*+,./:;<=>?@[\\\\\\]^`{|}]/u.exec(str); // without \" \", \"$\", \"-\" and \"_\"\n}\n/**\n * Checks whether the given string has upper.\n * @param {string} str\n */\nfunction hasUpper(str) {\n  return /[A-Z]/u.exec(str);\n}\n\n/**\n * Convert text to kebab-case\n * @param {string} str Text to be converted\n * @return {string}\n */\nfunction kebabCase(str) {\n  return str.replace(/_/gu, '-').replace(/\\B([A-Z])/gu, '-$1').toLowerCase();\n}\n\n/**\n * Checks whether the given string is kebab-case.\n * @param {string} str\n */\nfunction isKebabCase(str) {\n  if (hasUpper(str) || hasSymbols(str) || /^-/u.exec(str) ||\n  // starts with hyphen is not kebab-case\n  /_|--|\\s/u.exec(str)) {\n    return false;\n  }\n  return true;\n}\n\n/**\n * Convert text to snake_case\n * @param {string} str Text to be converted\n * @return {string}\n */\nfunction snakeCase(str) {\n  return str.replace(/\\B([A-Z])/gu, '_$1').replace(/-/gu, '_').toLowerCase();\n}\n\n/**\n * Checks whether the given string is snake_case.\n * @param {string} str\n */\nfunction isSnakeCase(str) {\n  if (hasUpper(str) || hasSymbols(str) || /-|__|\\s/u.exec(str)) {\n    return false;\n  }\n  return true;\n}\n\n/**\n * Convert text to camelCase\n * @param {string} str Text to be converted\n * @return {string} Converted string\n */\nfunction camelCase(str) {\n  if (isPascalCase(str)) {\n    return str.charAt(0).toLowerCase() + str.slice(1);\n  }\n  return str.replace(/[-_](\\w)/gu, (_, c) => c ? c.toUpperCase() : '');\n}\n\n/**\n * Checks whether the given string is camelCase.\n * @param {string} str\n */\nfunction isCamelCase(str) {\n  if (hasSymbols(str) || /^[A-Z]/u.exec(str) || /-|_|\\s/u.exec(str) // kebab or snake or space\n  ) {\n    return false;\n  }\n  return true;\n}\n\n/**\n * Convert text to PascalCase\n * @param {string} str Text to be converted\n * @return {string} Converted string\n */\nfunction pascalCase(str) {\n  return capitalize(camelCase(str));\n}\n\n/**\n * Checks whether the given string is PascalCase.\n * @param {string} str\n */\nfunction isPascalCase(str) {\n  if (hasSymbols(str) || /^[a-z]/u.exec(str) || /-|_|\\s/u.exec(str) // kebab or snake or space\n  ) {\n    return false;\n  }\n  return true;\n}\nconst convertersMap = {\n  'kebab-case': kebabCase,\n  snake_case: snakeCase,\n  camelCase,\n  PascalCase: pascalCase\n};\nconst checkersMap = {\n  'kebab-case': isKebabCase,\n  snake_case: isSnakeCase,\n  camelCase: isCamelCase,\n  PascalCase: isPascalCase\n};\n/**\n * Return case checker\n * @param { 'camelCase' | 'kebab-case' | 'PascalCase' | 'snake_case' } name type of checker to return ('camelCase', 'kebab-case', 'PascalCase')\n * @return {isKebabCase|isCamelCase|isPascalCase|isSnakeCase}\n */\nfunction getChecker(name) {\n  return checkersMap[name] || isPascalCase;\n}\n\n/**\n * Return case converter\n * @param { 'camelCase' | 'kebab-case' | 'PascalCase' | 'snake_case' } name type of converter to return ('camelCase', 'kebab-case', 'PascalCase')\n * @return {kebabCase|camelCase|pascalCase|snakeCase}\n */\nfunction getConverter(name) {\n  return convertersMap[name] || pascalCase;\n}\nmodule.exports = {\n  allowedCaseOptions: ['camelCase', 'kebab-case', 'PascalCase'],\n  /**\n   * Return case converter\n   * @param {string} name type of converter to return ('camelCase', 'kebab-case', 'PascalCase')\n   * @return {kebabCase|camelCase|pascalCase|snakeCase}\n   */\n  getConverter,\n  /**\n   * Return case checker\n   * @param {string} name type of checker to return ('camelCase', 'kebab-case', 'PascalCase')\n   * @return {isKebabCase|isCamelCase|isPascalCase|isSnakeCase}\n   */\n  getChecker,\n  /**\n   * Return case exact converter.\n   * If the converted result is not the correct case, the original value is returned.\n   * @param { 'camelCase' | 'kebab-case' | 'PascalCase' | 'snake_case' } name type of converter to return ('camelCase', 'kebab-case', 'PascalCase')\n   * @return {kebabCase|camelCase|pascalCase|snakeCase}\n   */\n  getExactConverter(name) {\n    const converter = getConverter(name);\n    const checker = getChecker(name);\n    return str => {\n      const result = converter(str);\n      return checker(result) ? result : str; /* cannot convert */\n    };\n  },\n\n  camelCase,\n  pascalCase,\n  kebabCase,\n  snakeCase,\n  isCamelCase,\n  isPascalCase,\n  isKebabCase,\n  isSnakeCase,\n  capitalize\n};","map":{"version":3,"names":["capitalize","str","charAt","toUpperCase","slice","hasSymbols","exec","hasUpper","kebabCase","replace","toLowerCase","isKebabCase","snakeCase","isSnakeCase","camelCase","isPascalCase","_","c","isCamelCase","pascalCase","convertersMap","snake_case","PascalCase","checkersMap","getChecker","name","getConverter","module","exports","allowedCaseOptions","getExactConverter","converter","checker","result"],"sources":["C:/Users/matth/projetweb/projetweb/node_modules/eslint-plugin-vue/lib/utils/casing.js"],"sourcesContent":["// ------------------------------------------------------------------------------\n// Helpers\n// ------------------------------------------------------------------------------\n\n/**\n * Capitalize a string.\n * @param {string} str\n */\nfunction capitalize(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1)\n}\n/**\n * Checks whether the given string has symbols.\n * @param {string} str\n */\nfunction hasSymbols(str) {\n  return /[!\"#%&'()*+,./:;<=>?@[\\\\\\]^`{|}]/u.exec(str) // without \" \", \"$\", \"-\" and \"_\"\n}\n/**\n * Checks whether the given string has upper.\n * @param {string} str\n */\nfunction hasUpper(str) {\n  return /[A-Z]/u.exec(str)\n}\n\n/**\n * Convert text to kebab-case\n * @param {string} str Text to be converted\n * @return {string}\n */\nfunction kebabCase(str) {\n  return str\n    .replace(/_/gu, '-')\n    .replace(/\\B([A-Z])/gu, '-$1')\n    .toLowerCase()\n}\n\n/**\n * Checks whether the given string is kebab-case.\n * @param {string} str\n */\nfunction isKebabCase(str) {\n  if (\n    hasUpper(str) ||\n    hasSymbols(str) ||\n    /^-/u.exec(str) || // starts with hyphen is not kebab-case\n    /_|--|\\s/u.exec(str)\n  ) {\n    return false\n  }\n  return true\n}\n\n/**\n * Convert text to snake_case\n * @param {string} str Text to be converted\n * @return {string}\n */\nfunction snakeCase(str) {\n  return str\n    .replace(/\\B([A-Z])/gu, '_$1')\n    .replace(/-/gu, '_')\n    .toLowerCase()\n}\n\n/**\n * Checks whether the given string is snake_case.\n * @param {string} str\n */\nfunction isSnakeCase(str) {\n  if (hasUpper(str) || hasSymbols(str) || /-|__|\\s/u.exec(str)) {\n    return false\n  }\n  return true\n}\n\n/**\n * Convert text to camelCase\n * @param {string} str Text to be converted\n * @return {string} Converted string\n */\nfunction camelCase(str) {\n  if (isPascalCase(str)) {\n    return str.charAt(0).toLowerCase() + str.slice(1)\n  }\n  return str.replace(/[-_](\\w)/gu, (_, c) => (c ? c.toUpperCase() : ''))\n}\n\n/**\n * Checks whether the given string is camelCase.\n * @param {string} str\n */\nfunction isCamelCase(str) {\n  if (\n    hasSymbols(str) ||\n    /^[A-Z]/u.exec(str) ||\n    /-|_|\\s/u.exec(str) // kebab or snake or space\n  ) {\n    return false\n  }\n  return true\n}\n\n/**\n * Convert text to PascalCase\n * @param {string} str Text to be converted\n * @return {string} Converted string\n */\nfunction pascalCase(str) {\n  return capitalize(camelCase(str))\n}\n\n/**\n * Checks whether the given string is PascalCase.\n * @param {string} str\n */\nfunction isPascalCase(str) {\n  if (\n    hasSymbols(str) ||\n    /^[a-z]/u.exec(str) ||\n    /-|_|\\s/u.exec(str) // kebab or snake or space\n  ) {\n    return false\n  }\n  return true\n}\n\nconst convertersMap = {\n  'kebab-case': kebabCase,\n  snake_case: snakeCase,\n  camelCase,\n  PascalCase: pascalCase\n}\n\nconst checkersMap = {\n  'kebab-case': isKebabCase,\n  snake_case: isSnakeCase,\n  camelCase: isCamelCase,\n  PascalCase: isPascalCase\n}\n/**\n * Return case checker\n * @param { 'camelCase' | 'kebab-case' | 'PascalCase' | 'snake_case' } name type of checker to return ('camelCase', 'kebab-case', 'PascalCase')\n * @return {isKebabCase|isCamelCase|isPascalCase|isSnakeCase}\n */\nfunction getChecker(name) {\n  return checkersMap[name] || isPascalCase\n}\n\n/**\n * Return case converter\n * @param { 'camelCase' | 'kebab-case' | 'PascalCase' | 'snake_case' } name type of converter to return ('camelCase', 'kebab-case', 'PascalCase')\n * @return {kebabCase|camelCase|pascalCase|snakeCase}\n */\nfunction getConverter(name) {\n  return convertersMap[name] || pascalCase\n}\n\nmodule.exports = {\n  allowedCaseOptions: ['camelCase', 'kebab-case', 'PascalCase'],\n\n  /**\n   * Return case converter\n   * @param {string} name type of converter to return ('camelCase', 'kebab-case', 'PascalCase')\n   * @return {kebabCase|camelCase|pascalCase|snakeCase}\n   */\n  getConverter,\n\n  /**\n   * Return case checker\n   * @param {string} name type of checker to return ('camelCase', 'kebab-case', 'PascalCase')\n   * @return {isKebabCase|isCamelCase|isPascalCase|isSnakeCase}\n   */\n  getChecker,\n\n  /**\n   * Return case exact converter.\n   * If the converted result is not the correct case, the original value is returned.\n   * @param { 'camelCase' | 'kebab-case' | 'PascalCase' | 'snake_case' } name type of converter to return ('camelCase', 'kebab-case', 'PascalCase')\n   * @return {kebabCase|camelCase|pascalCase|snakeCase}\n   */\n  getExactConverter(name) {\n    const converter = getConverter(name)\n    const checker = getChecker(name)\n    return (str) => {\n      const result = converter(str)\n      return checker(result) ? result : str /* cannot convert */\n    }\n  },\n\n  camelCase,\n  pascalCase,\n  kebabCase,\n  snakeCase,\n\n  isCamelCase,\n  isPascalCase,\n  isKebabCase,\n  isSnakeCase,\n\n  capitalize\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}